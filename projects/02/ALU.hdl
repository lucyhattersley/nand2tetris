// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // nx and ny implementation. Bitflips using Not16 and adds 1 using 
   // Inc16 to provide negatve values for x and y
   
   // nx   
   Not16(in=x, out=notxout);
   Inc16(in=notxout, out=nxout);
   
   // ny 
   Not16(in=y, out=notyout);
   Inc16(in=notyout, out=nyout);
   
   // zx and zy implementation. Adds x,y value and negative x,y value 
   Add16(a=x, b=nxout, out=zxout);
   Add16(a=y, b=nyout, out=zyout);
   
   // zx nx   
   // DMUX4Way
   // in x
   // out x
   //     nx
   //     zx
   //     zx nx

   // zy ny 
   // DMUX4Way
   // in y
   // out y
   //     ny
   //     zy
   //     zy ny

   // f
   // MUX for x
   // 0 to x&y

   // 1 to xandy

   // x&y

   // x+y

   // no
   // mux
   // out x

   // neg -> out x
   








   
}
